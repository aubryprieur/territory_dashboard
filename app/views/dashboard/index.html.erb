<!-- app/views/dashboard/index.html.erb -->
<div class="py-6">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold text-gray-900">Dashboard de <%= @territory_name %></h1>
      <span class="px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full text-sm font-medium">
        Code INSEE: <%= @territory_code %>
      </span>
    </div>

    <!-- Carte de synthèse -->
    <%= render "dashboard/synthese" %>

    <!-- Graphique d'évolution historique -->
    <%= render "dashboard/historique" %>


    <!-- Données économiques -->
    <div class="bg-white shadow rounded-lg p-6 mb-6">
      <h2 class="text-lg font-medium text-gray-900 mb-4">Indicateurs socio-économiques</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <!-- Revenus médians historiques - transformé en graphique -->
      <div>
        <h3 class="text-sm font-medium text-gray-700 mb-2">Évolution des revenus médians (€)</h3>
        <div class="h-64">
          <canvas id="revenue-chart"></canvas>
        </div>
      </div>
      <!-- Tableau comparatif des revenus médians avec évolution des écarts -->
      <div>
        <h3 class="text-sm font-medium text-gray-700 mb-2">Comparaison des revenus médians (€)</h3>
        <%
          # Trouver l'année la plus récente commune à tous les territoires
          commune_years = @revenue_data&.dig("median_revenues")&.keys || []
          epci_years = @epci_revenue_data&.dig("median_revenues")&.keys || []
          department_years = @department_revenue_data&.dig("median_revenues")&.keys || []
          region_years = @region_revenue_data&.dig("median_revenues")&.keys || []
          france_years = @france_revenue_data&.dig("median_revenues")&.keys || []

          all_years = (commune_years + epci_years + department_years + region_years + france_years).uniq
          latest_year = all_years.sort.last
          oldest_year = all_years.sort.first

          # Récupérer les valeurs pour la commune
          commune_latest = @revenue_data&.dig("median_revenues", latest_year)
          commune_oldest = @revenue_data&.dig("median_revenues", oldest_year)
        %>

        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Territoire</th>
              <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Revenu médian (<%= latest_year || 'N/A' %>)
              </th>
              <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Évolution des écarts (<%= oldest_year || 'N/A' %> - <%= latest_year || 'N/A' %>)
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <!-- Ligne pour la commune -->
            <tr>
              <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                <%= @territory_name %>
              </td>
              <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                <%= number_to_currency(commune_latest || 'N/A', unit: "€", separator: ",", delimiter: " ", format: "%n %u") %>
              </td>
              <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                Référence
              </td>
            </tr>
            <!-- Ligne pour l'EPCI si disponible -->
            <% if @epci_revenue_data.present? %>
              <%
                epci_latest = @epci_revenue_data&.dig("median_revenues", latest_year)
                epci_oldest = @epci_revenue_data&.dig("median_revenues", oldest_year)

                # Calcul des écarts
                if commune_latest && epci_latest && commune_oldest && epci_oldest
                  latest_gap = commune_latest - epci_latest
                  oldest_gap = commune_oldest - epci_oldest
                  gap_evolution = latest_gap - oldest_gap

                  # Si la valeur est négative, la commune s'éloigne (creusement de l'écart)
                  # Si la valeur est positive, la commune se rapproche (réduction de l'écart)
                  gap_text = if gap_evolution < 0
                               "S'éloigne de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             elsif gap_evolution > 0
                               "Se rapproche de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             else
                               "Stable"
                             end
                else
                  gap_text = "Données insuffisantes"
                end
              %>
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= @epci_revenue_data&.dig("name") || "EPCI" %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_currency(epci_latest || 'N/A', unit: "€", separator: ",", delimiter: " ", format: "%n %u") %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm
                    <%= gap_evolution && gap_evolution < 0 ? "text-red-600" : (gap_evolution && gap_evolution > 0 ? "text-green-600" : "text-gray-500") %>">
                  <%= gap_text %>
                </td>
              </tr>
            <% end %>

            <!-- Ligne pour le département si disponible -->
            <% if @department_revenue_data.present? %>
              <%
                dept_latest = @department_revenue_data&.dig("median_revenues", latest_year)
                dept_oldest = @department_revenue_data&.dig("median_revenues", oldest_year)

                # Calcul des écarts
                if commune_latest && dept_latest && commune_oldest && dept_oldest
                  latest_gap = commune_latest - dept_latest
                  oldest_gap = commune_oldest - dept_oldest
                  gap_evolution = latest_gap - oldest_gap

                  # Si la valeur est négative, la commune s'éloigne (creusement de l'écart)
                  # Si la valeur est positive, la commune se rapproche (réduction de l'écart)
                  gap_text = if gap_evolution < 0
                               "S'éloigne de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             elsif gap_evolution > 0
                               "Se rapproche de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             else
                               "Stable"
                             end
                else
                  gap_text = "Données insuffisantes"
                end
              %>
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= @department_revenue_data&.dig("name") || "Département" %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_currency(dept_latest || 'N/A', unit: "€", separator: ",", delimiter: " ", format: "%n %u") %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm
                    <%= gap_evolution && gap_evolution < 0 ? "text-red-600" : (gap_evolution && gap_evolution > 0 ? "text-green-600" : "text-gray-500") %>">
                  <%= gap_text %>
                </td>
              </tr>
            <% end %>

            <!-- Ligne pour la région si disponible -->
            <% if @region_revenue_data.present? %>
              <%
                region_latest = @region_revenue_data&.dig("median_revenues", latest_year)
                region_oldest = @region_revenue_data&.dig("median_revenues", oldest_year)

                # Calcul des écarts
                if commune_latest && region_latest && commune_oldest && region_oldest
                  latest_gap = commune_latest - region_latest
                  oldest_gap = commune_oldest - region_oldest
                  gap_evolution = latest_gap - oldest_gap

                  # Si la valeur est négative, la commune s'éloigne (creusement de l'écart)
                  # Si la valeur est positive, la commune se rapproche (réduction de l'écart)
                  gap_text = if gap_evolution < 0
                               "S'éloigne de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             elsif gap_evolution > 0
                               "Se rapproche de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             else
                               "Stable"
                             end
                else
                  gap_text = "Données insuffisantes"
                end
              %>
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= @region_revenue_data&.dig("name") || "Région" %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_currency(region_latest || 'N/A', unit: "€", separator: ",", delimiter: " ", format: "%n %u") %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm
                    <%= gap_evolution && gap_evolution < 0 ? "text-red-600" : (gap_evolution && gap_evolution > 0 ? "text-green-600" : "text-gray-500") %>">
                  <%= gap_text %>
                </td>
              </tr>
            <% end %>

            <!-- Ligne pour la France -->
            <% if @france_revenue_data.present? %>
              <%
                france_latest = @france_revenue_data&.dig("median_revenues", latest_year)
                france_oldest = @france_revenue_data&.dig("median_revenues", oldest_year)

                # Calcul des écarts
                if commune_latest && france_latest && commune_oldest && france_oldest
                  latest_gap = commune_latest - france_latest
                  oldest_gap = commune_oldest - france_oldest
                  gap_evolution = latest_gap - oldest_gap

                  # Si la valeur est négative, la commune s'éloigne (creusement de l'écart)
                  # Si la valeur est positive, la commune se rapproche (réduction de l'écart)
                  gap_text = if gap_evolution < 0
                               "S'éloigne de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             elsif gap_evolution > 0
                               "Se rapproche de #{number_to_currency(gap_evolution.abs, unit: "€", precision: 0, separator: ",", delimiter: " ", format: "%n %u")}"
                             else
                               "Stable"
                             end
                else
                  gap_text = "Données insuffisantes"
                end
              %>
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                  France
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_currency(france_latest || 'N/A', unit: "€", separator: ",", delimiter: " ", format: "%n %u") %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm
                    <%= gap_evolution && gap_evolution < 0 ? "text-red-600" : (gap_evolution && gap_evolution > 0 ? "text-green-600" : "text-gray-500") %>">
                  <%= gap_text %>
                </td>
              </tr>
            <% end %>


          </tbody>
        </table>
      </div>
      </div>
      <!-- Deuxième rangée pour les taux de pauvreté -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Taux de pauvreté historiques - transformé en graphique -->
        <div>
          <h3 class="text-sm font-medium text-gray-700 mb-2">Évolution du taux de pauvreté (%)</h3>
          <div class="h-64">
            <canvas id="poverty-chart"></canvas>
          </div>
        </div>

        <!-- Nouveau tableau comparatif des taux de pauvreté -->
        <div>
          <h3 class="text-sm font-medium text-gray-700 mb-2">Comparaison des taux de pauvreté (%)</h3>
          <%
            # Trouver l'année la plus récente commune à tous les territoires pour les taux de pauvreté
            commune_poverty_years = @revenue_data&.dig("poverty_rates")&.keys || []
            epci_poverty_years = @epci_revenue_data&.dig("poverty_rates")&.keys || []
            department_poverty_years = @department_revenue_data&.dig("poverty_rates")&.keys || []
            region_poverty_years = @region_revenue_data&.dig("poverty_rates")&.keys || []
            france_poverty_years = @france_revenue_data&.dig("poverty_rates")&.keys || []

            all_poverty_years = (commune_poverty_years + epci_poverty_years + department_poverty_years + region_poverty_years + france_poverty_years).uniq
            latest_poverty_year = all_poverty_years.sort.last
          %>

          <table class="min-w-full divide-y divide-gray-200">
            <thead>
              <tr>
                <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Territoire</th>
                <th class="px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Taux de pauvreté (<%= latest_poverty_year || 'N/A' %>)
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <!-- Ligne pour la commune -->
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                  <%= @territory_name %>
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_percentage(@revenue_data&.dig("poverty_rates", latest_poverty_year) || 'N/A', precision: 1) %>
                </td>
              </tr>

              <!-- Ligne pour l'EPCI si disponible -->
              <% if @epci_revenue_data.present? %>
                <tr>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= @epci_revenue_data&.dig("name") || "EPCI" %>
                  </td>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= number_to_percentage(@epci_revenue_data&.dig("poverty_rates", latest_poverty_year) || 'N/A', precision: 1) %>
                  </td>
                </tr>
              <% end %>

              <!-- Ligne pour le département si disponible -->
              <% if @department_revenue_data.present? %>
                <tr>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= @department_revenue_data&.dig("name") || "Département" %>
                  </td>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= number_to_percentage(@department_revenue_data&.dig("poverty_rates", latest_poverty_year) || 'N/A', precision: 1) %>
                  </td>
                </tr>
              <% end %>

              <!-- Ligne pour la région si disponible -->
              <% if @region_revenue_data.present? %>
                <tr>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= @region_revenue_data&.dig("name") || "Région" %>
                  </td>
                  <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                    <%= number_to_percentage(@region_revenue_data&.dig("poverty_rates", latest_poverty_year) || 'N/A', precision: 1) %>
                  </td>
                </tr>
              <% end %>

              <!-- Ligne pour la France -->
              <tr>
                <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                  France
                </td>
                <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                  <%= number_to_percentage(@france_revenue_data&.dig("poverty_rates", latest_poverty_year) || 'N/A', precision: 1) %>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Éducation et petite enfance -->
    <div class="bg-white shadow rounded-lg p-6">
      <h2 class="text-lg font-medium text-gray-900 mb-4">Éducation et petite enfance</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h3 class="text-sm font-medium text-gray-700 mb-2">Taux de scolarisation (Année: <%= @schooling_data&.dig("data")&.keys&.sort&.last || "N/A" %>)</h3>
          <div class="space-y-4">
            <%
              latest_year = @schooling_data&.dig("data")&.keys&.sort&.last
              latest_data = @schooling_data&.dig("data", latest_year) if latest_year
            %>
            <div class="bg-yellow-50 p-4 rounded-md">
              <h4 class="font-medium text-yellow-800">Enfants de 2 ans</h4>
              <p class="text-xl font-bold text-yellow-900">
                <%= number_to_percentage(latest_data&.dig("schooling_rate_2y") || 0, precision: 1) %>
              </p>
              <p class="text-sm text-yellow-700">
                <%= number_with_delimiter(latest_data&.dig("schooled_children_2y") || 0) %>
                sur <%= number_with_delimiter(latest_data&.dig("total_children_2y") || 0) %> enfants
              </p>
            </div>
            <div class="bg-orange-50 p-4 rounded-md">
              <h4 class="font-medium text-orange-800">Enfants de 3 à 5 ans</h4>
              <p class="text-xl font-bold text-orange-900">
                <%= number_to_percentage(latest_data&.dig("schooling_rate_3_5y") || 0, precision: 1) %>
              </p>
              <p class="text-sm text-orange-700">
                <%= number_with_delimiter(latest_data&.dig("schooled_children_3_5y") || 0) %>
                sur <%= number_with_delimiter(latest_data&.dig("total_children_3_5y") || 0) %> enfants
              </p>
            </div>
          </div>
        </div>
        <div>
          <h3 class="text-sm font-medium text-gray-700 mb-2">Modes d'accueil petite enfance</h3>
          <%
            latest_year = @childcare_data&.dig("coverage_data")&.keys&.sort&.last
            latest_childcare = @childcare_data&.dig("coverage_data", latest_year)&.dig("coverage_rates") if latest_year
          %>
          <% if latest_childcare %>
            <div class="space-y-2">
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Accueil collectif</span>
                <span class="font-medium"><%= number_to_percentage(latest_childcare["eaje_total"] || 0, precision: 1) %></span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-blue-600 h-2.5 rounded-full" style="width: <%= latest_childcare["eaje_total"] || 0 %>%"></div>
              </div>

              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Assistantes maternelles</span>
                <span class="font-medium"><%= number_to_percentage(latest_childcare["childminder"] || 0, precision: 1) %></span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-green-600 h-2.5 rounded-full" style="width: <%= latest_childcare["childminder"] || 0 %>%"></div>
              </div>

              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Préscolarisation</span>
                <span class="font-medium"><%= number_to_percentage(latest_childcare["preschool"] || 0, precision: 1) %></span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-purple-600 h-2.5 rounded-full" style="width: <%= latest_childcare["preschool"] || 0 %>%"></div>
              </div>

              <div class="flex justify-between items-center mt-4">
                <span class="text-sm font-medium text-gray-700">Couverture globale</span>
                <span class="font-bold"><%= number_to_percentage(latest_childcare["global"] || 0, precision: 1) %></span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-indigo-600 h-3 rounded-full" style="width: <%= latest_childcare["global"] || 0 %>%"></div>
              </div>
            </div>
          <% else %>
            <p class="text-gray-500 italic">Données non disponibles</p>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialisation des graphiques restants (revenu et pauvreté)
  document.addEventListener('turbo:load', function () {
    initRevenueChart();
    initPovertyChart();
  });

  // Graphique évolution des revenus médians
  function initRevenueChart() {
    console.log("Tentative d'initialisation du graphique des revenus");

    const chartElement = document.getElementById('revenue-chart');
    if (!chartElement) {
      console.warn("Élément canvas 'revenue-chart' non trouvé");
      return;
    }

    const communeRevenueData = <%= raw (@revenue_data&.dig("median_revenues") || {}).to_json %>;
    const epciRevenueData = <%= raw (@epci_revenue_data&.dig("median_revenues") || {}).to_json %>;
    const departmentRevenueData = <%= raw (@department_revenue_data&.dig("median_revenues") || {}).to_json %>;
    const regionRevenueData = <%= raw (@region_revenue_data&.dig("median_revenues") || {}).to_json %>;
    const franceRevenueData = <%= raw (@france_revenue_data&.dig("median_revenues") || {}).to_json %>;

    const communeName = "<%= @territory_name %>";
    const epciName = "<%= @epci_revenue_data&.dig('name') || 'EPCI' %>";
    const departmentName = "<%= @department_revenue_data&.dig('name') || 'Département' %>";
    const regionName = "<%= @region_revenue_data&.dig('name') || 'Région' %>";

    if (
      Object.keys(communeRevenueData).length === 0 &&
      Object.keys(epciRevenueData).length === 0 &&
      Object.keys(departmentRevenueData).length === 0 &&
      Object.keys(regionRevenueData).length === 0 &&
      Object.keys(franceRevenueData).length === 0
    ) {
      console.warn("Aucune donnée de revenus disponible");
      return;
    }

    try {
      const existingChart = Chart.getChart(chartElement);
      if (existingChart) existingChart.destroy();
    } catch (e) {
      console.warn("Erreur en vérifiant si un graphique de revenus existant:", e);
    }

    const allYears = new Set();
    [communeRevenueData, epciRevenueData, departmentRevenueData, regionRevenueData, franceRevenueData].forEach(data => {
      Object.keys(data).forEach(year => allYears.add(year));
    });
    const years = Array.from(allYears).sort();

    const colors = {
      commune: { line: 'rgba(79, 209, 197, 1)', fill: 'rgba(79, 209, 197, 0.2)' },
      epci: { line: 'rgba(59, 130, 246, 1)', fill: 'rgba(59, 130, 246, 0.2)' },
      department: { line: 'rgba(139, 92, 246, 1)', fill: 'rgba(139, 92, 246, 0.2)' },
      region: { line: 'rgba(249, 115, 22, 1)', fill: 'rgba(249, 115, 22, 0.2)' },
      france: { line: 'rgba(220, 38, 38, 1)', fill: 'rgba(220, 38, 38, 0.2)' }
    };

    const datasets = [];

    if (Object.keys(communeRevenueData).length > 0) {
      datasets.push({
        label: communeName,
        data: years.map(year => communeRevenueData[year] || null),
        backgroundColor: colors.commune.fill,
        borderColor: colors.commune.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.commune.line
      });
    }

    if (Object.keys(epciRevenueData).length > 0) {
      datasets.push({
        label: epciName,
        data: years.map(year => epciRevenueData[year] || null),
        backgroundColor: colors.epci.fill,
        borderColor: colors.epci.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.epci.line
      });
    }

    if (Object.keys(departmentRevenueData).length > 0) {
      datasets.push({
        label: departmentName,
        data: years.map(year => departmentRevenueData[year] || null),
        backgroundColor: colors.department.fill,
        borderColor: colors.department.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.department.line
      });
    }

    if (Object.keys(regionRevenueData).length > 0) {
      datasets.push({
        label: regionName,
        data: years.map(year => regionRevenueData[year] || null),
        backgroundColor: colors.region.fill,
        borderColor: colors.region.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.region.line
      });
    }

    if (Object.keys(franceRevenueData).length > 0) {
      datasets.push({
        label: 'France',
        data: years.map(year => franceRevenueData[year] || null),
        backgroundColor: colors.france.fill,
        borderColor: colors.france.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.france.line
      });
    }

    try {
      new Chart(chartElement, {
        type: 'line',
        data: {
          labels: years,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false,
              ticks: {
                callback: function (value) {
                  return new Intl.NumberFormat('fr-FR').format(value) + ' €';
                }
              }
            }
          },
          plugins: {
            legend: {
              display: true,
              position: 'bottom',
              labels: {
                boxWidth: 12,
                usePointStyle: true
              }
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  return context.dataset.label + ': ' + new Intl.NumberFormat('fr-FR').format(context.raw) + ' €';
                }
              }
            },
            datalabels: {
              display: false
            }
          }
        }
      });

      console.log("Graphique des revenus créé avec succès");
    } catch (e) {
      console.error("Erreur lors de la création du graphique des revenus:", e);
    }
  }

  // Graphique évolution du taux de pauvreté
  function initPovertyChart() {
    console.log("Tentative d'initialisation du graphique des taux de pauvreté");

    // Vérifier si l'élément canvas existe
    const chartElement = document.getElementById('poverty-chart');
    if (!chartElement) {
      console.warn("Élément canvas 'poverty-chart' non trouvé");
      return;
    }

    // Récupérer les données de taux de pauvreté pour tous les territoires
    const communePovertyData = <%= raw (@revenue_data&.dig("poverty_rates") || {}).to_json %>;
    const epciPovertyData = <%= raw (@epci_revenue_data&.dig("poverty_rates") || {}).to_json %>;
    const departmentPovertyData = <%= raw (@department_revenue_data&.dig("poverty_rates") || {}).to_json %>;
    const regionPovertyData = <%= raw (@region_revenue_data&.dig("poverty_rates") || {}).to_json %>;
    const francePovertyData = <%= raw (@france_revenue_data&.dig("poverty_rates") || {}).to_json %>;

    // Récupérer les noms des territoires
    const communeName = "<%= @territory_name %>";
    const epciName = "<%= @epci_revenue_data&.dig('name') || 'EPCI' %>";
    const departmentName = "<%= @department_revenue_data&.dig('name') || 'Département' %>";
    const regionName = "<%= @region_revenue_data&.dig('name') || 'Région' %>";

    // Si aucune donnée n'est disponible pour aucun territoire
    if (Object.keys(communePovertyData).length === 0 &&
        Object.keys(epciPovertyData).length === 0 &&
        Object.keys(departmentPovertyData).length === 0 &&
        Object.keys(regionPovertyData).length === 0 &&
        Object.keys(francePovertyData).length === 0) {
      console.warn("Aucune donnée de taux de pauvreté disponible");
      return;
    }

    // Vérifier si un graphique existe déjà sur ce canvas
    try {
      const existingChart = Chart.getChart(chartElement);
      if (existingChart) {
        existingChart.destroy();
      }
    } catch (e) {
      console.warn("Erreur en vérifiant si un graphique de pauvreté existant:", e);
    }

    // Collecter toutes les années disponibles dans tous les territoires
    const allYears = new Set();
    [communePovertyData, epciPovertyData, departmentPovertyData, regionPovertyData, francePovertyData].forEach(data => {
      Object.keys(data).forEach(year => allYears.add(year));
    });

    // Convertir en tableau et trier
    const years = Array.from(allYears).sort();

    // Définir des couleurs distinctes pour chaque territoire - on garde les mêmes que pour les revenus pour la cohérence
    const colors = {
      commune: { line: 'rgba(79, 209, 197, 1)', fill: 'rgba(79, 209, 197, 0.2)' },
      epci: { line: 'rgba(59, 130, 246, 1)', fill: 'rgba(59, 130, 246, 0.2)' },
      department: { line: 'rgba(139, 92, 246, 1)', fill: 'rgba(139, 92, 246, 0.2)' },
      region: { line: 'rgba(249, 115, 22, 1)', fill: 'rgba(249, 115, 22, 0.2)' },
      france: { line: 'rgba(220, 38, 38, 1)', fill: 'rgba(220, 38, 38, 0.2)' }
    };

    // Préparer les datasets pour le graphique
    const datasets = [];

    // Dataset pour la commune
    if (Object.keys(communePovertyData).length > 0) {
      datasets.push({
        label: communeName,
        data: years.map(year => communePovertyData[year] || null),
        backgroundColor: colors.commune.fill,
        borderColor: colors.commune.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.commune.line
      });
    }

    // Dataset pour l'EPCI
    if (Object.keys(epciPovertyData).length > 0) {
      datasets.push({
        label: epciName,
        data: years.map(year => epciPovertyData[year] || null),
        backgroundColor: colors.epci.fill,
        borderColor: colors.epci.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.epci.line
      });
    }

    // Dataset pour le département
    if (Object.keys(departmentPovertyData).length > 0) {
      datasets.push({
        label: departmentName,
        data: years.map(year => departmentPovertyData[year] || null),
        backgroundColor: colors.department.fill,
        borderColor: colors.department.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.department.line
      });
    }

    // Dataset pour la région
    if (Object.keys(regionPovertyData).length > 0) {
      datasets.push({
        label: regionName,
        data: years.map(year => regionPovertyData[year] || null),
        backgroundColor: colors.region.fill,
        borderColor: colors.region.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.region.line
      });
    }

    // Dataset pour la France
    if (Object.keys(francePovertyData).length > 0) {
      datasets.push({
        label: 'France',
        data: years.map(year => francePovertyData[year] || null),
        backgroundColor: colors.france.fill,
        borderColor: colors.france.line,
        borderWidth: 2,
        tension: 0.1,
        pointBackgroundColor: colors.france.line
      });
    }

    try {
      // Créer le graphique
      new Chart(chartElement, {
        type: 'line',
        data: {
          labels: years,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              suggestedMax: 40, // Plafond suggéré pour les taux de pauvreté
              ticks: {
                callback: function(value) {
                  return value + '%';
                }
              }
            }
          },
          plugins: {
            legend: {
              display: true,
              position: 'bottom',
              labels: {
                boxWidth: 12,
                usePointStyle: true
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  return context.dataset.label + ': ' + context.raw + '%';
                }
              }
            },
            datalabels: {
              display: false // Désactiver les étiquettes de données car il y a trop de séries
            }
          }
        }
      });

      console.log("Graphique des taux de pauvreté créé avec succès");
    } catch (e) {
      console.error("Erreur lors de la création du graphique des taux de pauvreté:", e);
    }
  }
</script>

