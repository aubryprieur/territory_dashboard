<!-- app/views/epci_dashboard/_domestic_violence.html.erb -->
<div class="bg-white shadow rounded-lg p-6 mb-6" data-epci-code="<%= @epci_code %>">
  <h2 class="text-lg font-medium text-gray-900 mb-4">Violences intrafamiliales</h2>

  <% if @epci_domestic_violence_data.present? %>
    <div class="bg-red-50 p-4 rounded-lg mb-6">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <h3 class="text-sm font-medium text-red-800 mb-1">Taux moyen sur l'EPCI</h3>
          <p class="text-2xl font-bold text-red-900">
            <%= number_with_precision(@epci_domestic_violence_data["epci_average_rate"], precision: 2) %> ‰
          </p>
        </div>
        <div>
          <h3 class="text-sm font-medium text-red-800 mb-1">Communes concernées</h3>
          <p class="text-2xl font-bold text-red-900">
            <%= @epci_domestic_violence_data["communes_count"] %>
          </p>
        </div>
        <div>
          <h3 class="text-sm font-medium text-red-800 mb-1">Population concernée</h3>
          <p class="text-2xl font-bold text-red-900">
            <%= number_with_delimiter(@epci_domestic_violence_data["total_population"].to_i) %>
          </p>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Cartes des taux de violences intrafamiliales -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
    <!-- Carte des taux de violences de la dernière année -->
    <div>
      <h4 class="text-sm font-medium text-gray-700 mb-2">Carte des taux de violences intrafamiliales par commune (<%= @epci_latest_violence_year %>)</h4>
      <div id="communes-map-violence" class="h-[500px] w-full border border-gray-200 rounded-md"></div>
      <div id="violence-map-legend" class="mt-3"></div>
    </div>

    <!-- Information complémentaire -->
    <!-- Information complémentaire (alternative sans flexbox) -->
    <div>
      <h4 class="text-sm font-medium text-gray-700 mb-2">Analyse des violences intrafamiliales</h4>
      <div class="bg-gray-50 p-4 rounded-md min-h-[500px]">
        <div>
          <p class="text-gray-600 mb-4">
            Cette carte présente le taux de violences intrafamiliales (pour 1000 habitants) pour chaque commune de l'EPCI pour l'année <%= @epci_latest_violence_year %>.
          </p>
          <p class="text-gray-600 mb-4">
            Les taux sont calculés à partir des données des services de police et de gendarmerie concernant les coups et blessures volontaires enregistrés dans un cadre familial.
          </p>
        </div>

        <div class="mt-8">
          <h5 class="text-sm font-medium text-gray-700 mb-2">À savoir</h5>
          <ul class="list-disc pl-5 text-sm text-gray-600 space-y-1">
            <li>Ces données ne reflètent que les faits déclarés et enregistrés</li>
            <li>Les taux peuvent être influencés par les variations de pratiques de signalement</li>
            <li>Pour les petites communes, de faibles variations en nombre peuvent générer de fortes variations en taux</li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Données JSON pour la carte -->
  <script type="application/json" id="communes-domestic-violence-geojson">
    <%= raw(@communes_domestic_violence_geojson) %>
  </script>

  <!-- Évolution des taux de violences intrafamiliales -->
  <div class="mt-8">
    <h4 class="text-sm font-medium text-gray-700 mb-2">Évolution des taux de violences intrafamiliales par commune (2016-<%= @epci_latest_violence_year.to_s[-2..-1] %>)</h4>
    <div class="h-[500px] w-full">
      <canvas id="domestic-violence-chart-<%= @epci_code %>"></canvas>
    </div>
    <div id="chart-controls-<%= @epci_code %>" class="mt-4 flex flex-wrap gap-2 justify-center">
      <!-- Les boutons de contrôle seront ajoutés ici par le script -->
    </div>
  </div>

  <!-- Tableau des communes à taux élevés -->
  <div class="mt-8 mb-6">
    <h4 class="text-sm font-medium text-gray-700 mb-2">Communes avec les taux les plus élevés</h4>
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Commune</th>
            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Taux moyen (‰)</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% if @epci_domestic_violence_data && @epci_domestic_violence_data["communes"].present? %>
            <%
              top_communes = @epci_domestic_violence_data["communes"].sort_by { |c| -c["average_rate"] }.first(5)
              top_communes.each do |commune|
            %>
              <tr>
                <td class="px-4 py-3 whitespace-nowrap text-sm font-medium"><%= commune["name"] %></td>
                <td class="px-4 py-3 whitespace-nowrap text-sm font-medium"><%= number_with_precision(commune["average_rate"], precision: 2) %></td>
              </tr>
            <% end %>
          <% else %>
            <tr>
              <td colspan="2" class="px-4 py-3 text-sm text-gray-500 text-center">Données non disponibles</td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Ajout d'une note explicative concernant le graphique -->
  <div class="mt-4 bg-gray-50 p-4 rounded-md">
    <h4 class="text-sm font-medium text-gray-700 mb-2">À propos des violences intrafamiliales</h4>
    <p class="text-sm text-gray-600">
      Le graphique ci-dessus présente l'évolution des taux de violences intrafamiliales (pour 1000 habitants) par commune.
      Vous pouvez cliquer sur les éléments de la légende pour afficher ou masquer une commune spécifique.
      Utilisez les boutons pour afficher toutes les communes, seulement celles dépassant la moyenne départementale ou régionale,
      ou masquer toutes les communes. Les données sont issues des services de police et de gendarmerie et concernent les coups
      et blessures volontaires enregistrés dans un cadre familial.
    </p>
  </div>
</div>

<!-- Script JavaScript avec meilleure gestion des événements -->
<script>
// Fonction d'initialisation du graphique
function initDomesticViolenceChart(epciCode) {
  console.log("Initializing domestic violence chart for EPCI", epciCode);

  // Utiliser l'ID spécifique à l'EPCI pour garantir que nous travaillons avec le bon canvas
  const chartId = `domestic-violence-chart-${epciCode}`;
  const ctx = document.getElementById(chartId);
  if (!ctx) {
    console.warn(`Canvas with ID ${chartId} not found`);
    return;
  }

  // Vérifier si un graphique existe déjà sur ce canvas et le détruire
  if (window.domesticViolenceCharts && window.domesticViolenceCharts[epciCode]) {
    console.log("Destroying existing chart for EPCI", epciCode);
    window.domesticViolenceCharts[epciCode].destroy();
  }

  // Fonction pour décoder les entités HTML
  function decodeHTMLEntities(text) {
    const textarea = document.createElement('textarea');
    textarea.innerHTML = text;
    return textarea.value;
  }

  // Fonction pour générer une couleur aléatoire mais consistante basée sur un nom de commune
  function stringToColor(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }

    const h = Math.abs(hash) % 360;
    return `hsl(${h}, 70%, 60%)`;
  }

  // Années à afficher
  const years = ["2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023"];
  const allDatasets = [];

  // Collecter les données de toutes les communes pour cet EPCI spécifique
  <% if @epci_domestic_violence_data && @epci_domestic_violence_data["communes"].present? %>
    const communesWithData = [];

    <% @epci_domestic_violence_data["communes"].each do |commune| %>
      {
        const communeData = [
          <% (16..23).each do |year_short| %>
            <% year_data = commune["yearly_data"].find { |d| d["year"] == year_short } %>
            <%= year_data ? "#{year_data["rate"]}" : 'null' %>,
          <% end %>
        ];

        // Vérifier si les données ne sont pas toutes nulles avant d'ajouter
        if (communeData.some(val => val !== null)) {
          // Calculer la moyenne (en ignorant les valeurs nulles)
          const validValues = communeData.filter(val => val !== null);
          const avgRate = validValues.length > 0
            ? validValues.reduce((a, b) => a + b, 0) / validValues.length
            : 0;

          communesWithData.push({
            name: decodeHTMLEntities("<%= commune["name"] %>"),
            data: communeData,
            avgRate: avgRate,
            color: stringToColor("<%= commune["name"] %>")
          });
        }
      }
    <% end %>

    // Trier les communes par taux moyen
    communesWithData.sort((a, b) => b.avgRate - a.avgRate);

    // Créer les datasets pour toutes les communes
    communesWithData.forEach(commune => {
      allDatasets.push({
        label: commune.name,
        data: commune.data,
        borderColor: commune.color,
        backgroundColor: 'rgba(0, 0, 0, 0)',
        borderWidth: 1.5,
        pointRadius: 2,
        pointHoverRadius: 5,
        hidden: true // Toutes cachées par défaut
      });
    });
  <% end %>

  // Ajouter moyenne EPCI
  <% if @epci_domestic_violence_data && @epci_domestic_violence_data["yearly_rates"].present? %>
    const epciData = [
      <% (16..23).each do |year_short| %>
        <% year_str = "20#{year_short}" %>
        <%= @epci_domestic_violence_data["yearly_rates"][year_str] || 'null' %>,
      <% end %>
    ];

    allDatasets.push({
      label: "Moyenne EPCI <%= @epci_name %>",
      data: epciData,
      borderColor: '#000000',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderWidth: 3,
      pointRadius: 4,
      pointHoverRadius: 6,
      hidden: false
    });
  <% end %>

  // Département
  <% if @department_domestic_violence_data.present? %>
    const deptData = [
      <% (16..23).each do |year_short| %>
        <% if @department_domestic_violence_data["department"].present? %>
          <%
            dept_year_data = @department_domestic_violence_data["department"]["data"].find do |d|
              d["year"] == year_short && d["indicator_class"] == "Coups et blessures volontaires intrafamiliaux"
            end
          %>
          <%= dept_year_data ? "#{dept_year_data["rate"]}" : 'null' %>,
        <% else %>
          null,
        <% end %>
      <% end %>
    ];

    allDatasets.push({
      label: decodeHTMLEntities("<%= @department_name %>"),
      data: deptData,
      borderColor: '#4F46E5',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderWidth: 3,
      borderDash: [5, 5],
      pointRadius: 4,
      hidden: false
    });
  <% end %>

  // Région
  <% if @region_domestic_violence_data.present? %>
    const regionData = [
      <% (16..23).each do |year_short| %>
        <% if @region_domestic_violence_data["region"].present? %>
          <%
            region_year_data = @region_domestic_violence_data["region"]["data"].find do |d|
              d["year"] == year_short && d["indicator_class"] == "Coups et blessures volontaires intrafamiliaux"
            end
          %>
          <%= region_year_data ? "#{region_year_data["rate"]}" : 'null' %>,
        <% else %>
          null,
        <% end %>
      <% end %>
    ];

    allDatasets.push({
      label: decodeHTMLEntities("<%= @region_name %>"),
      data: regionData,
      borderColor: '#10B981',
      backgroundColor: 'rgba(0, 0, 0, 0)',
      borderWidth: 3,
      borderDash: [5, 5],
      pointRadius: 4,
      hidden: false
    });
  <% end %>

  console.log("Creating chart with " + allDatasets.length + " datasets");

  // Créer le graphique
  const chart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: years,
      datasets: allDatasets
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: 'Taux pour 1000 habitants'
          }
        }
      },
      plugins: {
        legend: {
          position: 'bottom',
          display: true,
          labels: {
            boxWidth: 10,
            padding: 10,
            font: {
              size: 9
            }
          },
          onClick: function(e, legendItem, legend) {
            // Comportement par défaut de Chart.js (toggle visibility)
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            const meta = ci.getDatasetMeta(index);

            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
            ci.update();
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              if (context.raw === null) return 'Donnée non disponible';
              return context.dataset.label + ': ' + context.raw.toFixed(2) + '‰';
            }
          }
        }
      }
    }
  });

  // Sauvegarder le graphique dans un objet global pour pouvoir le détruire plus tard
  if (!window.domesticViolenceCharts) {
    window.domesticViolenceCharts = {};
  }
  window.domesticViolenceCharts[epciCode] = chart;

  // Ajouter des boutons pour plus de contrôle sur les données affichées
  const controlsId = `violence-controls-${epciCode}`;
  const existingControls = document.getElementById(controlsId);

  if (existingControls) {
    existingControls.remove();
  }

  const controlsDiv = document.createElement('div');
  controlsDiv.id = controlsId;
  controlsDiv.className = 'mt-4 flex flex-wrap gap-2 justify-center';
  controlsDiv.innerHTML = `
    <button id="show-all-communes-${epciCode}" class="px-3 py-2 bg-gray-200 text-gray-800 text-xs font-medium rounded hover:bg-gray-300">
      Afficher toutes les communes
    </button>
    <button id="show-high-rate-communes-${epciCode}" class="px-3 py-2 bg-red-100 text-red-800 text-xs font-medium rounded hover:bg-red-200">
      Communes > moyenne départementale/régionale
    </button>
    <button id="hide-all-communes-${epciCode}" class="px-3 py-2 bg-gray-200 text-gray-800 text-xs font-medium rounded hover:bg-gray-300">
      Masquer toutes les communes
    </button>
  `;

  // Insérer les contrôles juste après le graphique
  ctx.parentNode.insertAdjacentElement('afterend', controlsDiv);

  // Ajouter les événements sur les boutons
  document.getElementById(`show-all-communes-${epciCode}`).addEventListener('click', function() {
    // Afficher toutes les communes
    allDatasets.forEach((dataset, index) => {
      if (!dataset.label.includes('Moyenne') &&
          !dataset.label.includes('Département') &&
          !dataset.label.includes('Région')) {
        chart.setDatasetVisibility(index, true);
      }
    });
    chart.update();
  });

  document.getElementById(`show-high-rate-communes-${epciCode}`).addEventListener('click', function() {
    // D'abord masquer toutes les communes
    allDatasets.forEach((dataset, index) => {
      if (!dataset.label.includes('Moyenne') &&
          !dataset.label.includes('Département') &&
          !dataset.label.includes('Région')) {
        chart.setDatasetVisibility(index, false);
      }
    });

    // Trouver l'index de la dernière année avec des données
    let lastYearIndex = years.length - 1;
    while (lastYearIndex >= 0) {
      // Vérifier si les données départementales ou régionales existent pour cette année
      const deptDataset = allDatasets.find(d => d.label.includes('Département'));
      const regionDataset = allDatasets.find(d => d.label.includes('Région'));

      const deptValue = deptDataset ? deptDataset.data[lastYearIndex] : null;
      const regionValue = regionDataset ? regionDataset.data[lastYearIndex] : null;

      if (deptValue !== null || regionValue !== null) {
        break;
      }

      lastYearIndex--;
    }

    if (lastYearIndex >= 0) {
      // Déterminer le seuil (max entre département et région)
      const deptDataset = allDatasets.find(d => d.label.includes('Département'));
      const regionDataset = allDatasets.find(d => d.label.includes('Région'));

      const deptValue = deptDataset ? deptDataset.data[lastYearIndex] : -Infinity;
      const regionValue = regionDataset ? regionDataset.data[lastYearIndex] : -Infinity;

      const threshold = Math.max(
        deptValue !== null ? deptValue : -Infinity,
        regionValue !== null ? regionValue : -Infinity
      );

      // Afficher les communes dont la valeur pour la dernière année dépasse le seuil
      allDatasets.forEach((dataset, index) => {
        if (!dataset.label.includes('Moyenne') &&
            !dataset.label.includes('Département') &&
            !dataset.label.includes('Région')) {

          const communeValue = dataset.data[lastYearIndex];
          if (communeValue !== null && communeValue > threshold) {
            chart.setDatasetVisibility(index, true);
          }
        }
      });

      // Indiquer le seuil utilisé
      const yearLabel = years[lastYearIndex];
      const thresholdText = threshold.toFixed(2);
      const referenceText = deptValue >= regionValue ? "départementale" : "régionale";

      // Supprimer toute alerte précédente
      const existingAlert = document.querySelector(`.threshold-alert-${epciCode}`);
      if (existingAlert) {
        existingAlert.remove();
      }

      // Afficher une alerte temporaire pour indiquer le seuil utilisé
      const alertDiv = document.createElement('div');
      alertDiv.className = `mt-2 p-2 bg-yellow-50 border border-yellow-200 text-yellow-800 text-xs rounded threshold-alert-${epciCode}`;
      alertDiv.textContent = `Affichage des communes avec un taux supérieur à la moyenne ${referenceText} (${thresholdText}‰) pour l'année ${yearLabel}`;
      controlsDiv.parentNode.insertBefore(alertDiv, controlsDiv.nextSibling);

      // Supprimer l'alerte après 5 secondes
      setTimeout(() => {
        alertDiv.remove();
      }, 5000);
    }

    chart.update();
  });

  document.getElementById(`hide-all-communes-${epciCode}`).addEventListener('click', function() {
    // Masquer toutes les communes mais garder les moyennes
    allDatasets.forEach((dataset, index) => {
      if (!dataset.label.includes('Moyenne') &&
          !dataset.label.includes('Département') &&
          !dataset.label.includes('Région')) {
        chart.setDatasetVisibility(index, false);
      }
    });
    chart.update();
  });
}

// Au chargement de la page, initialiser les graphiques pour tous les EPCI présents
document.addEventListener('turbo:load', function() {
  // Trouver tous les conteneurs de violences domestiques dans la page
  const containers = document.querySelectorAll('[data-epci-code]');

  containers.forEach(container => {
    const epciCode = container.getAttribute('data-epci-code');
    if (epciCode) {
      initDomesticViolenceChart(epciCode);
    }
  });
});

// Exécuter également au chargement initial pour les pages non chargées via Turbo
document.addEventListener('DOMContentLoaded', function() {
  // Le même code que pour turbo:load pour s'assurer que ça fonctionne dans tous les cas
  const containers = document.querySelectorAll('[data-epci-code]');

  containers.forEach(container => {
    const epciCode = container.getAttribute('data-epci-code');
    if (epciCode) {
      initDomesticViolenceChart(epciCode);
    }
  });
});
</script>
