<%= form_with(model: [:admin, @user], class: "space-y-6") do |form| %>
  <% if @user.errors.any? %>
    <div class="bg-red-50 p-4 rounded-md mb-6">
      <h2 class="text-red-800 font-medium mb-2">
        <%= pluralize(@user.errors.count, "erreur") %> ont empêché cet utilisateur d'être sauvegardé:
      </h2>
      <ul class="list-disc pl-5 text-red-700">
        <% @user.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-4">
    <%= form.label :email, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.email_field :email, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
  </div>

  <div class="mb-4">
    <%= form.label :password, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.password_field :password, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
    <% if @user.persisted? %>
      <p class="mt-1 text-sm text-gray-500">
        Laissez vide si vous ne souhaitez pas changer le mot de passe
      </p>
    <% end %>
  </div>

  <div class="mb-4">
    <%= form.label :password_confirmation, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.password_field :password_confirmation, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
  </div>

  <div class="mb-4">
    <%= form.label :role, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.select :role, User.roles.keys.map { |role| [role.humanize, role] }, {}, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
  </div>

  <div class="mb-4">
    <%= form.label :territory_type, "Type de territoire", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.select :territory_type,
      [["Commune", "commune"], ["EPCI", "epci"], ["Département", "department"], ["Région", "region"]],
      { include_blank: "Sélectionnez un type de territoire" },
      class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50",
      id: "territory_type_select"
    %>
  </div>

  <!-- Champ pour la recherche de commune (visible par défaut) -->
  <div id="commune_search_container" class="mb-4">
    <%= form.label :territory_name, "Nom de la commune", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <div class="relative">
      <%= form.text_field :territory_name, class: "hidden", id: "real_territory_name_commune" %>
      <input type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            id="territory_search_commune"
            placeholder="Rechercher une commune..."
            autocomplete="off">
      <div id="territory_suggestions_commune" class="absolute z-10 w-full bg-white mt-1 border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto hidden"></div>
    </div>
    <p class="mt-1 text-sm text-gray-500">
      Commencez à taper le nom de la commune pour voir les suggestions. Assurez-vous de bien sélectionner la commune avec le bon code INSEE.
    </p>
  </div>

  <!-- Champ pour la recherche d'EPCI (caché par défaut) -->
  <div id="epci_search_container" class="mb-4 hidden">
    <%= form.label :territory_name, "Nom de l'EPCI", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <div class="relative">
      <%= form.text_field :territory_name, class: "hidden", id: "real_territory_name_epci" %>
      <input type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            id="territory_search_epci"
            placeholder="Rechercher un EPCI..."
            autocomplete="off">
      <div id="territory_suggestions_epci" class="absolute z-10 w-full bg-white mt-1 border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto hidden"></div>
    </div>
    <p class="mt-1 text-sm text-gray-500">
      Commencez à taper le nom de l'EPCI pour voir les suggestions. La liste affichera le nom, le code et le type d'EPCI.
    </p>
  </div>

  <!-- Champs pour département et région (cachés par défaut) -->
  <div id="department_search_container" class="mb-4 hidden">
    <%= form.label :territory_name, "Nom du département", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <div class="relative">
      <%= form.text_field :territory_name, class: "hidden", id: "real_territory_name_department" %>
      <input type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            id="territory_search_department"
            placeholder="Rechercher un département..."
            autocomplete="off">
      <div id="territory_suggestions_department" class="absolute z-10 w-full bg-white mt-1 border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto hidden"></div>
    </div>
  </div>

  <div id="region_search_container" class="mb-4 hidden">
    <%= form.label :territory_name, "Nom de la région", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <div class="relative">
      <%= form.text_field :territory_name, class: "hidden", id: "real_territory_name_region" %>
      <input type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            id="territory_search_region"
            placeholder="Rechercher une région..."
            autocomplete="off">
      <div id="territory_suggestions_region" class="absolute z-10 w-full bg-white mt-1 border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto hidden"></div>
    </div>
  </div>

  <div class="mb-4">
    <%= form.label :territory_code, "Code du territoire", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.text_field :territory_code, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50", readonly: true %>
  </div>

  <div class="flex justify-end">
    <%= form.submit class: "py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" %>
  </div>
<% end %>

<script>
  document.addEventListener('turbo:load', function() {
    // Sélectionner les éléments du DOM
    const territoryTypeSelect = document.getElementById('territory_type_select');
    const communeSearchContainer = document.getElementById('commune_search_container');
    const epciSearchContainer = document.getElementById('epci_search_container');
    const departmentSearchContainer = document.getElementById('department_search_container');
    const regionSearchContainer = document.getElementById('region_search_container');

    // Champs pour les communes
    const territorySearchCommune = document.getElementById('territory_search_commune');
    const realTerritoryNameCommune = document.getElementById('real_territory_name_commune');
    const territorySuggestionsCommune = document.getElementById('territory_suggestions_commune');

    // Champs pour les EPCI
    const territorySearchEpci = document.getElementById('territory_search_epci');
    const realTerritoryNameEpci = document.getElementById('real_territory_name_epci');
    const territorySuggestionsEpci = document.getElementById('territory_suggestions_epci');

    // Champs pour les départements
    const territorySearchDepartment = document.getElementById('territory_search_department');
    const realTerritoryNameDepartment = document.getElementById('real_territory_name_department');
    const territorySuggestionsDepartment = document.getElementById('territory_suggestions_department');

    // Champs pour les régions
    const territorySearchRegion = document.getElementById('territory_search_region');
    const realTerritoryNameRegion = document.getElementById('real_territory_name_region');
    const territorySuggestionsRegion = document.getElementById('territory_suggestions_region');

    // Champ pour le code du territoire
    const territoryCodeField = document.getElementById('user_territory_code');

    // Fonction pour normaliser les chaînes de caractères (enlever les accents)
    function normalizeString(str) {
      return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    // Fonction pour afficher/masquer les champs appropriés en fonction du type de territoire sélectionné
    function toggleSearchContainers() {
      const selectedType = territoryTypeSelect.value;

      // Cacher tous les conteneurs
      communeSearchContainer.classList.add('hidden');
      epciSearchContainer.classList.add('hidden');
      departmentSearchContainer.classList.add('hidden');
      regionSearchContainer.classList.add('hidden');

      // Afficher le conteneur approprié
      if (selectedType === 'commune') {
        communeSearchContainer.classList.remove('hidden');
      } else if (selectedType === 'epci') {
        epciSearchContainer.classList.remove('hidden');
      } else if (selectedType === 'department') {
        departmentSearchContainer.classList.remove('hidden');
      } else if (selectedType === 'region') {
        regionSearchContainer.classList.remove('hidden');
      }

      // Réinitialiser les champs
      territoryCodeField.value = '';
      realTerritoryNameCommune.value = '';
      realTerritoryNameEpci.value = '';
      realTerritoryNameDepartment.value = '';
      realTerritoryNameRegion.value = '';
      territorySearchCommune.value = '';
      territorySearchEpci.value = '';
      territorySearchDepartment.value = '';
      territorySearchRegion.value = '';
    }

    // Ajouter un gestionnaire d'événements pour le changement de type de territoire
    territoryTypeSelect.addEventListener('change', toggleSearchContainers);

    // Initialiser l'affichage en fonction du type de territoire sélectionné
    toggleSearchContainers();

    // Précharger les valeurs si en mode édition
    if (territoryCodeField.value) {
      const territoryType = territoryTypeSelect.value;
      if (territoryType === 'commune') {
        territorySearchCommune.value = '<%= @user.territory_name %>';
        realTerritoryNameCommune.value = '<%= @user.territory_name %>';
      } else if (territoryType === 'epci') {
        territorySearchEpci.value = '<%= @epci_display_name.present? ? @epci_display_name : @user.territory_name %>';
        realTerritoryNameEpci.value = '<%= @user.territory_name %>';
      } else if (territoryType === 'department') {
        territorySearchDepartment.value = '<%= @user.territory_name %>';
        realTerritoryNameDepartment.value = '<%= @user.territory_name %>';
      } else if (territoryType === 'region') {
        territorySearchRegion.value = '<%= @user.territory_name %>';
        realTerritoryNameRegion.value = '<%= @user.territory_name %>';
      }
    }

    // Gestionnaire d'autocomplétion pour les communes (code existant)
    if (territorySearchCommune && territorySuggestionsCommune) {
      let searchTimeout;

      territorySearchCommune.addEventListener('input', function() {
        const searchTerm = this.value.trim();

        // Vider le champ de code si la recherche est vide
        if (searchTerm === '') {
          territoryCodeField.value = '';
          realTerritoryNameCommune.value = '';
          territorySuggestionsCommune.classList.add('hidden');
          return;
        }

        // Effacer le timeout précédent
        clearTimeout(searchTimeout);

        if (searchTerm.length >= 2) {
          // Attendre 300ms avant de faire la recherche
          searchTimeout = setTimeout(() => {
            fetch(`/territories/autocomplete?term=${encodeURIComponent(searchTerm)}`, {
              headers: {
                'Accept': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
              // Vider les suggestions existantes
              territorySuggestionsCommune.innerHTML = '';

              // Si aucun résultat, masquer la liste
              if (data.length === 0) {
                territorySuggestionsCommune.classList.add('hidden');
                return;
              }

              // Normaliser le terme de recherche
              const normalizedSearchTerm = normalizeString(searchTerm.toLowerCase());

              // Déterminer les correspondances exactes, partielles et qui commencent par
              data.forEach(territory => {
                const normalizedTerritory = normalizeString(territory.value.toLowerCase());
                territory.exact_match = normalizedTerritory === normalizedSearchTerm;
                territory.starts_with = normalizedTerritory.startsWith(normalizedSearchTerm);
              });

              // Trier les résultats par pertinence
              data.sort((a, b) => {
                // Priorité 1: Les correspondances exactes
                if (a.exact_match && !b.exact_match) return -1;
                if (!a.exact_match && b.exact_match) return 1;

                // Priorité 2: Les communes qui commencent par le terme recherché
                if (a.starts_with && !b.starts_with) return -1;
                if (!a.starts_with && b.starts_with) return 1;

                // Priorité 3: Par département
                if (a.dep !== b.dep) return a.dep.localeCompare(b.dep);

                // Puis par nom
                return a.value.localeCompare(b.value);
              });

              // Créer un élément pour chaque suggestion
              data.forEach(territory => {
                const suggestion = document.createElement('div');

                // Appliquer une classe spéciale pour les correspondances exactes
                let cssClass = 'px-4 py-2 hover:bg-indigo-50 cursor-pointer flex items-center justify-between';

                if (territory.exact_match) {
                  cssClass += ' bg-indigo-100 font-semibold';
                } else if (territory.starts_with) {
                  cssClass += ' bg-indigo-50';
                }

                suggestion.className = cssClass;

                // Créer le contenu principal
                const mainContent = document.createElement('span');
                mainContent.textContent = territory.display_value;
                suggestion.appendChild(mainContent);

                // Ajouter un badge pour les correspondances exactes
                if (territory.exact_match) {
                  const badge = document.createElement('span');
                  badge.className = 'px-2 py-1 text-xs bg-indigo-600 text-white rounded-full ml-2';
                  badge.textContent = 'Exact';
                  suggestion.appendChild(badge);
                }

                // Stocker les données du territoire dans l'élément
                suggestion.dataset.codgeo = territory.codgeo;
                suggestion.dataset.epci = territory.epci;
                suggestion.dataset.dep = territory.dep;
                suggestion.dataset.reg = territory.reg;
                suggestion.dataset.fullName = territory.display_value;
                suggestion.dataset.name = territory.value;

                // Ajouter un gestionnaire d'événements pour la sélection
                suggestion.addEventListener('click', function() {
                  // Mettre à jour les champs avec les données du territoire sélectionné
                  territorySearchCommune.value = this.dataset.fullName;
                  realTerritoryNameCommune.value = this.dataset.name;
                  territoryCodeField.value = this.dataset.codgeo;

                  // Masquer les suggestions
                  territorySuggestionsCommune.classList.add('hidden');
                });

                territorySuggestionsCommune.appendChild(suggestion);
              });

              // Afficher la liste de suggestions
              territorySuggestionsCommune.classList.remove('hidden');
            })
            .catch(error => {
              console.error('Erreur lors de la recherche de communes:', error);
              territorySuggestionsCommune.classList.add('hidden');
            });
          }, 300);
        } else {
          // Masquer les suggestions si la recherche est trop courte
          territorySuggestionsCommune.classList.add('hidden');
        }
      });

      // Masquer les suggestions lorsque l'utilisateur clique ailleurs
      document.addEventListener('click', function(event) {
        if (!territorySearchCommune.contains(event.target) && !territorySuggestionsCommune.contains(event.target)) {
          territorySuggestionsCommune.classList.add('hidden');
        }
      });

      // Rétablir la valeur sélectionnée si l'utilisateur quitte le champ sans sélectionner une suggestion
      territorySearchCommune.addEventListener('blur', function() {
        // Attendre un peu pour permettre la sélection d'une suggestion
        setTimeout(() => {
          if (realTerritoryNameCommune.value && !territorySuggestionsCommune.contains(document.activeElement)) {
            // Si une valeur a été précédemment sélectionnée, la rétablir
            if (territoryCodeField.value) {
              territorySearchCommune.value = realTerritoryNameCommune.value;
            } else {
              // Si aucune valeur n'a été sélectionnée, vider le champ
              territorySearchCommune.value = '';
              realTerritoryNameCommune.value = '';
            }
          }
        }, 200);
      });
    }

    // Gestionnaire d'autocomplétion pour les EPCI
    if (territorySearchEpci && territorySuggestionsEpci) {
      let searchTimeout;

      territorySearchEpci.addEventListener('input', function() {
        const searchTerm = this.value.trim();

        // Vider le champ de code si la recherche est vide
        if (searchTerm === '') {
          territoryCodeField.value = '';
          realTerritoryNameEpci.value = '';
          territorySuggestionsEpci.classList.add('hidden');
          return;
        }

        // Effacer le timeout précédent
        clearTimeout(searchTimeout);

        if (searchTerm.length >= 2) {
          // Attendre 300ms avant de faire la recherche
          searchTimeout = setTimeout(() => {
            fetch(`/epcis/autocomplete?term=${encodeURIComponent(searchTerm)}`, {
              headers: {
                'Accept': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
              // Vider les suggestions existantes
              territorySuggestionsEpci.innerHTML = '';

              // Si aucun résultat, masquer la liste
              if (data.length === 0) {
                territorySuggestionsEpci.classList.add('hidden');
                return;
              }

              // Normaliser le terme de recherche
              const normalizedSearchTerm = normalizeString(searchTerm.toLowerCase());

              // Trier par pertinence
              data.sort((a, b) => {
                if (a.exact_match && !b.exact_match) return -1;
                if (!a.exact_match && b.exact_match) return 1;
                return a.name.localeCompare(b.name);
              });

              // Créer un élément pour chaque suggestion
              data.forEach(epci => {
                const suggestion = document.createElement('div');
                suggestion.className = 'px-4 py-2 hover:bg-indigo-50 cursor-pointer flex items-center justify-between';

                // Marquer la suggestion comme exacte si c'est une correspondance exacte
                if (epci.exact_match) {
                  suggestion.className += ' bg-indigo-100 font-semibold';
                }

                // Créer le contenu principal
                const mainContent = document.createElement('span');
                mainContent.textContent = epci.display_value;
                suggestion.appendChild(mainContent);

                // Stocker les données de l'EPCI dans l'élément
                suggestion.dataset.epciCode = epci.epci_code;
                suggestion.dataset.fullName = epci.display_value;
                suggestion.dataset.name = epci.name;

                // Ajouter un gestionnaire d'événements pour la sélection
                suggestion.addEventListener('click', function() {
                  // Mettre à jour les champs
                  territorySearchEpci.value = this.dataset.fullName;
                  realTerritoryNameEpci.value = this.dataset.name;
                  territoryCodeField.value = this.dataset.epciCode;

                  // Masquer les suggestions
                  territorySuggestionsEpci.classList.add('hidden');
                });

                territorySuggestionsEpci.appendChild(suggestion);
              });

              // Afficher la liste de suggestions
              territorySuggestionsEpci.classList.remove('hidden');
            })
            .catch(error => {
              console.error('Erreur lors de la recherche d\'EPCI:', error);
              territorySuggestionsEpci.classList.add('hidden');
            });
          }, 300);
        } else {
          // Masquer les suggestions si la recherche est trop courte
          territorySuggestionsEpci.classList.add('hidden');
        }
      });

      // Masquer les suggestions lorsque l'utilisateur clique ailleurs
      document.addEventListener('click', function(event) {
        if (!territorySearchEpci.contains(event.target) && !territorySuggestionsEpci.contains(event.target)) {
          territorySuggestionsEpci.classList.add('hidden');
        }
      });

      // Rétablir la valeur sélectionnée si l'utilisateur quitte le champ sans sélectionner une suggestion
      territorySearchEpci.addEventListener('blur', function() {
        // Attendre un peu pour permettre la sélection d'une suggestion
        setTimeout(() => {
          if (realTerritoryNameEpci.value && !territorySuggestionsEpci.contains(document.activeElement)) {
            // Si une valeur a été précédemment sélectionnée, la rétablir
            if (territoryCodeField.value) {
              territorySearchEpci.value = realTerritoryNameEpci.value;
            } else {
              // Si aucune valeur n'a été sélectionnée, vider le champ
              territorySearchEpci.value = '';
              realTerritoryNameEpci.value = '';
            }
          }
        }, 200);
      });
    }
  });
</script>
