// app/javascript/epci/dashboard_init.js

import { initializeCommuneSearch } from "epci/commune_search";
import { initializeTabsScroll } from "epci/tabs_scroll";

// Fonction d'initialisation principale du dashboard EPCI
function initializeEpciDashboard() {
  console.log("üöÄ Initialisation du dashboard EPCI");

  // ‚úÖ R√©cup√©rer les donn√©es des communes depuis l'√©l√©ment JSON
  const communesDataElement = document.getElementById('communes-data-json');

  if (!communesDataElement) {
    console.warn('‚ùå √âl√©ment communes-data-json non trouv√© dans le DOM');
    return;
  }

  try {
    // ‚úÖ Parser les donn√©es JSON
    const data = JSON.parse(communesDataElement.textContent);
    console.log('üìä Donn√©es pars√©es:', data);

    // ‚úÖ Validation des donn√©es
    if (!data || !data.communes || !Array.isArray(data.communes)) {
      console.error('‚ùå Structure de donn√©es invalide:', data);
      return;
    }

    const communes = data.communes;
    console.log(`‚úÖ ${communes.length} communes trouv√©es pour la recherche`);

    // ‚úÖ Validation que les communes ont les propri√©t√©s requises
    const validCommunes = communes.filter(commune => {
      return commune && commune.code && commune.name;
    });

    if (validCommunes.length !== communes.length) {
      console.warn(`‚ö†Ô∏è ${communes.length - validCommunes.length} communes ignor√©es (donn√©es manquantes)`);
    }

    // ‚úÖ Initialiser la recherche de communes avec les donn√©es valid√©es
    const searchInstance = initializeCommuneSearch(validCommunes);

    if (searchInstance) {
      console.log('‚úÖ Recherche de communes initialis√©e avec succ√®s');
    } else {
      console.error('‚ùå √âchec de l\'initialisation de la recherche');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du parsing des donn√©es des communes:', error);
    console.error('Contenu de l\'√©l√©ment:', communesDataElement.textContent.substring(0, 200) + '...');
  }

  // ‚úÖ Initialiser le scroll des onglets
  try {
    initializeTabsScroll();
    console.log('‚úÖ Scroll des onglets initialis√©');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation du scroll des onglets:', error);
  }
}

// ‚úÖ Initialiser au chargement du DOM et avec Turbo
document.addEventListener('DOMContentLoaded', initializeEpciDashboard);
document.addEventListener('turbo:load', initializeEpciDashboard);

// Export pour pouvoir √™tre utilis√© ailleurs si n√©cessaire
export { initializeEpciDashboard };
